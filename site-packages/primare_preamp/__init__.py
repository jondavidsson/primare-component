"""
Primare has an RS232 interface to control the preamp.

Not all preamps have all functions.
Functions can be found on the Primare website: http://nadelectronics.com/software
"""

import codecs
import socket
from time import sleep
from typing import Any, Dict, Iterable, Optional, Union
from primare_preamp.nad_commands import CMDS
from primare_preamp.primare_transport import (PrimareTransport, SerialPortTransport, TelnetTransportWrapper,
                                        DEFAULT_TIMEOUT)

import logging


logging.basicConfig()
_LOGGER = logging.getLogger("primare_preamp")
# Uncomment this line to see all communication with the device:
_LOGGER.setLevel(logging.DEBUG)


class PrimarePreamp:
    """Primare preamp."""
    transport: PrimareTransport

    def __init__(self, serial_port: str) -> None:
        """Create RS232 connection."""
        self.transport = SerialPortTransport(serial_port)

    def exec_command(self, domain: str, function: str, operator: str, value: Optional[str] =None) -> Optional[str]:
        """
        Write a command to the preamp and read the value it returns.

        The preamp will always return a value, also when setting a value.
        """
        if operator in CMDS[domain][function]['supported_operators']:
            if operator == '=' and value is None:
                raise ValueError('No value provided')

            cmd = ''.join([CMDS[domain][function]['cmd'], operator])  # type: ignore
            assert isinstance(cmd, str)
            if value:
                cmd = cmd + value
        else:
            raise ValueError('Invalid operator provided %s' % operator)

        try:
            msg = self.transport.communicate(cmd)
            _LOGGER.debug(f"sent: '{cmd}' reply: '{msg}'")
            return msg.split('=')[1]
        except IndexError:
            pass
        return None

    def main_dimmer(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Dimmer."""
        return self.exec_command('main', 'dimmer', operator, value)

    def main_mute(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Mute."""
        return self.exec_command('main', 'mute', operator, value)

    def main_power(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Power."""
        return self.exec_command('main', 'power', operator, value)

    def main_volume(self, operator: str, value: Optional[str] =None) -> Optional[float]:
        """
        Execute Main.Volume.

        Returns float
        """
        if value is not None:
            volume = self.exec_command('main', 'volume', operator, str(value))
        else:
            volume = self.exec_command('main', 'volume', operator)

        if volume is None:
            return None
        try:
            res = float(volume)
            return res
        except (ValueError):
            pass

        return None

    def main_ir(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.IR."""
        return self.exec_command('main', 'ir', operator, value)

    def main_listeningmode(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.ListeningMode."""
        return self.exec_command('main', 'listeningmode', operator, value)

    def main_sleep(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Sleep."""
        return self.exec_command('main', 'sleep', operator, value)

    def main_tape_monitor(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Tape1."""
        return self.exec_command('main', 'tape_monitor', operator, value)

    def main_speaker_a(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.SpeakerA."""
        return self.exec_command('main', 'speaker_a', operator, value)

    def main_speaker_b(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.SpeakerB."""
        return self.exec_command('main', 'speaker_b', operator, value)

    def main_source(self, operator: str, value: Optional[str]=None) -> Optional[Union[int, str]]:
        """
        Execute Main.Source.

        Returns int
        """
        if value is not None:
            source = self.exec_command('main', 'source', operator, str(value))
        else:
            source = self.exec_command('main', 'source', operator)

        if source is None:
            return None
        try:
            # try to return as integer, some preamps return numbers
            return int(source)
        except ValueError:
            # return source as string
            return source
        return None

    def main_version(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Version."""
        return self.exec_command('main', 'version', operator, value)

    def main_model(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Main.Model."""
        return self.exec_command('main', 'model', operator, value)

    def tuner_am_frequency(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.AM.Frequence."""
        return self.exec_command('tuner', 'am_frequency', operator, value)

    def tuner_am_preset(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.AM.Preset."""
        return self.exec_command('tuner', 'am_preset', operator, value)

    def tuner_band(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.Band."""
        return self.exec_command('tuner', 'band', operator, value)

    def tuner_fm_frequency(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.FM.Frequence."""
        return self.exec_command('tuner', 'fm_frequency', operator, value)

    def tuner_fm_mute(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.FM.Mute."""
        return self.exec_command('tuner', 'fm_mute', operator, value)

    def tuner_fm_preset(self, operator: str, value: Optional[str] =None) -> Optional[str]:
        """Execute Tuner.FM.Preset."""
        return self.exec_command('tuner', 'fm_preset', operator, value)